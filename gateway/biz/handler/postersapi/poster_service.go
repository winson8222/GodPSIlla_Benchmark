// Code generated by hertz generator.

	package postersapi
	
	import (
		"context"
		"sync"
		"gateway/biz/model/postersapi"
		"github.com/cloudwego/kitex/client/genericclient"
		"github.com/cloudwego/hertz/pkg/app"
		"github.com/cloudwego/hertz/pkg/protocol/consts"
	)
	
	func Getuniqueusernames8020(ctx context.Context, c *app.RequestContext) {
		var req postersapi.Request
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		cli := myGenClientPool.Get().(genericclient.Client)
		defer myGenClientPool.Put(cli)
		st, err := c.Body()
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
	
	
		resp, err := DoGetuniqueusernames8020(ctx, cli, string(st)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}

	
	func Getuniqueusernames2080(ctx context.Context, c *app.RequestContext) {
		var req postersapi.Request
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		cli := myGenClientPool.Get().(genericclient.Client)
		defer myGenClientPool.Put(cli)
		st, err := c.Body()
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
	
	
		resp, err := DoGetuniqueusernames2080(ctx, cli, string(st)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}

	
	func Getuniqueusernames8099920(ctx context.Context, c *app.RequestContext) {
		var req postersapi.Request
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		cli := myGenClientPool.Get().(genericclient.Client)
		defer myGenClientPool.Put(cli)
		st, err := c.Body()
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
	
	
		resp, err := DoGetuniqueusernames8099920(ctx, cli, string(st)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}

	
	func Getuniqueusernames2099980(ctx context.Context, c *app.RequestContext) {
		var req postersapi.Request
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		cli := myGenClientPool.Get().(genericclient.Client)
		defer myGenClientPool.Put(cli)
		st, err := c.Body()
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
	
	
		resp, err := DoGetuniqueusernames2099980(ctx, cli, string(st)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}

	
	func Getuniqueusernames80k20k(ctx context.Context, c *app.RequestContext) {
		var req postersapi.Request
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		cli := myGenClientPool.Get().(genericclient.Client)
		defer myGenClientPool.Put(cli)
		st, err := c.Body()
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
	
	
		resp, err := DoGetuniqueusernames80k20k(ctx, cli, string(st)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}

	
	func Getuniqueusernames20k80k(ctx context.Context, c *app.RequestContext) {
		var req postersapi.Request
		err := c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}

		cli := myGenClientPool.Get().(genericclient.Client)
		defer myGenClientPool.Put(cli)
		st, err := c.Body()
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
	
	
		resp, err := DoGetuniqueusernames20k80k(ctx, cli, string(st)) // Pass the generic client and requestContext
		if err != nil {
			c.String(consts.StatusInternalServerError, "Failed to perform generic call")
			return
		}
	
		c.JSON(consts.StatusOK, resp)
	}

		
	var myGenClientPool = sync.Pool{
		New: func() interface{} {
			// Create and return a new object of the type you want to pool.
			return PosterServiceGenericClient()
		},
	}